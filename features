Implemented Functions :

1. add-body (adds a body to the world)
2. remove-body (removes a body of given id from the world)
3. alert (invokes alert)

4. on (adds an event handler)
		when the 1st argument happens, code enclosed in 2nd argument is evaluated 
		(adds the event handler to the event)
		Supported handlers :
			-> mouseup : e.g : (on mouseup "(remove (body-at (vector2 x-up y-up)))")
			-> mousedown : e.g : (on mousedown "(remove (body-at (vector2 x-down y-down)))")
			-> mousemove :
				e.g : (on mousemove 
						"(apply-impulse (body-at (vector2 x-before y-before) 
						(vector2 (- x-after x-before) (- y-after y-after)))")
						
						;;applies an impulse proportional to extent of mouse movement
						
			-> keydown : e.g : (on keydown "(if (= key-down 65) (apply-impulse "id3" (vector2 50.0 50.0)))")
			-> keyup : e.g : (on keyup "(if (= key-up 65) (apply-impulse "id3" (vector2 50.0 50.0)))")
			
			-> drag (not primitive, but can be implemented)
				e.g : 
					(define drag? #f)
					;;drag? tells if there is currently a dragging happening
					(on mousedown "(set! drag? #t)")
					(on mouseup "(set! drag? #f)")
					;;Define a function that pulls along, bodies that are dragged
					(define (func)
						(if drag?
							;;handle here
					))
					;;add the handler
					(on mousemove "(func)")
					
								
5. ~on (removes event handler(s) , undoes 'on')

6. handler-data (returns a list of all handlers of event(s))

7. change-bg-color (changes the background color)
8. change-body-color (changes a body's color)
9. random (returns a random number)

10. apply-impulse (apply impulse and change the momentum of a body)
	e.g : (apply-impulse "id3" (vector2 10.0 150.0))
11. apply-force (apply force for a required period of time on a body)
	e.g : (apply-force "id3" (vector2 1000.0 150.0) 5000) -> applies force for 5000 ms

(Body information returning function : )

12. body-com (center of mass position of a body)
13. body-angle (angle of a body)
14. body-vertices (vertices of a body (as was initiialized))
15. body-linear-velocity (velocity of a body)
16. body-attributes (attributes (density, friction, restitution) of a body)
17. body-color (color of a body)

18. set-gravity (set the gravity of a world)
19. body-at (id of the body at the specified coordinates)

Implemented Variables :

1. x-up & y-up (coordinates of the last mouse up on canvas)
2. x-down & y-down (coordinates of the last mouse down on canvas)
3. x-before & y-before (coordinates of the mouse before this movement on canvas)
4. x-after & y-after (coordinates of the mouse after this movement on canvas)
5. body-count (number of bodies in the world)
6. body-list (list of ids of all bodies in defined in the world)
7. canvas-width & canvas-height (dimensions of the HTML5 canvas in pixels)
8. key-down (code of the last pressed key)
9. key-up (code of released key)


Sample programs :

1. Change colors of all bodies to random colors when a mouseup occurs

(define (change-all-colors b-list)
  (if (not (null? b-list))
      (begin
        (change-body-color (car b-list) (color (random) (random) (random)))
        (change-all-colors (cdr b-list)))))

(on mouseup "(change-all-colors body-list)")

2. Move a body around, with WASD keys

(define id "id2")
(define (jump id)
  (cond
    ((= key-down 65) (apply-impulse id (vector2 -500 0)))
    ((= key-down 68) (apply-impulse id (vector2 500 0)))
    ((= key-down 87) (apply-impulse id (vector2 0 500)))
    ((= key-down 83) (apply-impulse id (vector2 0 -500)))
))
(on keydown "(jump id)")

3. Repeatedly shoot bullets every second

;;generates an id
(define (gen-id)
  (string-concat (list "id" (+ body-count 1))))

(define (shoot-bullet)
  (define b-shape (rect-shape 10.0 10.0))
  (define b-attribs (attributes 1.0 0.5 0.3))
  (define b-position (vector2 50.0 400.0))
  (define b-color (color 0.3 0.4 0.65))
  (define b-angle 0.0)
  (define id (gen-id))

  (begin
    (add-body dynamic b-shape b-position b-angle b-attribs b-color id)
    (apply-impulse id (vector2 300 -500))
    (sleep 1)
    (shoot-bullet)))

(shoot-bullet)


4. Create a drag and throw effect on bodies

(define drag? #f)

(on mousedown "(set! drag? #t)")
(on mouseup "(set! drag? #f)")


(define (pull)
  (if drag?
    (apply-impulse (body-at (vector2 x-before y-before)) (vector2 (* 50 (- x-after x-before)) (* 50 (- y-after y-before))))))

(on mousemove "(pull)")

